#!/usr/bin/env bash
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$PLUGIN_CORE_AVAILABLE_PATH/common/property-functions"
source "$PLUGIN_AVAILABLE_PATH/http-auth/internal-functions"
set -eo pipefail
[[ $DOKKU_TRACE ]] && set -x

cmd-http-auth-report() {
  declare desc="displays a http-auth report for one or more apps"
  declare cmd="http-auth:report"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" INFO_FLAG="$2"
  local INSTALLED_APPS=$(dokku_apps)

  if [[ -n "$APP" ]] && [[ "$APP" == --* ]]; then
    INFO_FLAG="$APP"
    APP=""
  fi

  if [[ -z "$APP" ]] && [[ -z "$INFO_FLAG" ]]; then
    INFO_FLAG="true"
  fi

  if [[ -z "$APP" ]]; then
    for app in $INSTALLED_APPS; do
      cmd-http-auth-report-single "$app" "$INFO_FLAG" | tee || true
    done
  else
    cmd-http-auth-report-single "$APP" "$INFO_FLAG"
  fi
}

cmd-http-auth-report-single() {
  declare APP="$1" INFO_FLAG="$2"
  if [[ "$INFO_FLAG" == "true" ]]; then
    INFO_FLAG=""
  fi
  verify_app_name "$APP"
  local flag_map=(
    "--http-auth-enabled: $(fn-http-auth-enabled "$APP")"
  )

  if [[ -z "$INFO_FLAG" ]]; then
    dokku_log_info2_quiet "${APP} http-auth information"
    for flag in "${flag_map[@]}"; do
      key="$(echo "${flag#--}" | cut -f1 -d' ' | tr - ' ')"
      dokku_log_verbose "$(printf "%-30s %-25s" "${key^}" "${flag#*: }")"
    done
  else
    local match=false
    local value_exists=false
    for flag in "${flag_map[@]}"; do
      valid_flags="${valid_flags} $(echo "$flag" | cut -d':' -f1)"
      if [[ "$flag" == "${INFO_FLAG}:"* ]]; then
        value=${flag#*: }
        size="${#value}"
        if [[ "$size" -ne 0 ]]; then
          echo "$value" && match=true && value_exists=true
        else
          match=true
        fi
      fi
    done
    [[ "$match" == "true" ]] || dokku_log_fail "Invalid flag passed, valid flags:${valid_flags}"
    [[ "$value_exists" == "true" ]] || dokku_log_fail "not deployed"
  fi
}

cmd-http-auth-show-config() {
  declare desc="display app http-auth config"
  declare cmd="http-auth:show-config"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1"

  verify_app_name "$APP"
  if [[ ! -f "$DOKKU_ROOT/$APP/nginx.conf.d/http-auth.conf" ]]; then
    dokku_log_fail "No nginx.conf exists for $APP"
  fi

  cat "$DOKKU_ROOT/$APP/nginx.conf.d/http-auth.conf"
}

cmd-http-auth-on() {
  declare desc="enable http auth for app"
  declare cmd="http-auth:on"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" AUTH_USERNAME="$2" AUTH_PASSWORD="$3"
  local APP_ROOT="$DOKKU_ROOT/$APP"

  verify_app_name "$APP"
  if [[ "$(fn-http-auth-enabled "$APP")" == "true" ]]; then
    dokku_log_info1 "Authentication already enabled, use http-auth:add-user or http-auth:remove-user to modify users"
    return
  fi

  [[ -z "$AUTH_USERNAME" || -z "$AUTH_PASSWORD" ]] && dokku_log_fail "Please provide a username and a password"

  dokku_log_info1 "Enabling HTTP auth for $APP..."
  fn-http-auth-template-config "$APP"
  fn-http-auth-add-user "$APP" "$AUTH_USERNAME" "$AUTH_PASSWORD"

  plugn trigger proxy-build-config "$APP"
  dokku_log_verbose "Done"
}

cmd-http-auth-off() {
  declare desc="disable http auth for app"
  declare cmd="http-auth:off"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1"
  local APP_ROOT="$DOKKU_ROOT/$APP"

  verify_app_name "$APP"
  if [[ "$(fn-http-auth-enabled "$APP")" == "false" ]]; then
    dokku_log_info1 "Authentication already disabled"
    return
  fi

  dokku_log_info1 "Disabling HTTP auth for $APP..."
  rm -f "$APP_ROOT/nginx.conf.d/http-auth.conf" "$APP_ROOT/htpasswd"
  plugn trigger proxy-build-config "$APP"
  dokku_log_verbose "Done"
}

cmd-http-auth-add-user() {
  declare desc="add http auth user to app"
  declare cmd="http-auth:add-user"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" AUTH_USERNAME="$2" AUTH_PASSWORD="$3"

  verify_app_name "$APP"
  if [[ "$(fn-http-auth-enabled "$APP")" == "false" ]]; then
    dokku_log_fail "Authentication is disabled"
    return
  fi

  dokku_log_info1 "Adding $AUTH_USERNAME to basic auth list"
  fn-http-auth-add-user "$APP" "$AUTH_USERNAME" "$AUTH_PASSWORD"
  plugn trigger proxy-build-config "$APP"
}

cmd-http-auth-add-allowed-ip() {
  declare desc="add allowed ip to basic auth bypass for an app"
  declare cmd="http-auth:add-allowed-ip"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" ADDRESS="$2"


  dokku_log_info1 "Adding $ADDRESS to allowed ip list"
  fn-plugin-property-list-add "http-auth" "$APP" "allowed-ips" "$ADDRESS"
  fn-http-auth-template-config "$APP"
  plugn trigger proxy-build-config "$APP"
}

cmd-http-auth-remove-user() {
  declare desc="remove http auth user from app"
  declare cmd="http-auth:remove-user"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" AUTH_USERNAME="$2" AUTH_PASSWORD="$3"

  verify_app_name "$APP"
  if [[ "$(fn-http-auth-enabled "$APP")" == "false" ]]; then
    dokku_log_fail "Authentication is disabled"
    return
  fi

  dokku_log_info1 "Removing $AUTH_USERNAME from basic auth list"
  fn-http-auth-remove-user "$APP" "$AUTH_USERNAME" "$AUTH_PASSWORD"
  plugn trigger proxy-build-config "$APP"
}

cmd-http-auth-remove-allowed-ip() {
  declare desc="remove allowed ip from basic auth bypass for an app"
  declare cmd="http-auth:remove-allowed-ip"
  [[ "$1" == "$cmd" ]] && shift 1
  declare APP="$1" ADDRESS="$2"

  dokku_log_info1 "Removing $ADDRESS from allowed ip list"
  fn-plugin-property-list-remove "http-auth" "$APP" "allowed-ips" "$ADDRESS"
  fn-http-auth-template-config "$APP"
  plugn trigger proxy-build-config "$APP"
}
